<chapter id="installation">
  <title>Installation</title>
  <para>
   You need a C++ compiler to compile and use YAZ++.
   The software was implemented using <ulink url="&url.gcc;">GCC</ulink>
   so we know that works well with YAZ++. From time to time the
   software is compiled on Windows using Visual C++.
   Other compilers should work too. Let us know of portability
   problems, etc. with your system.
  </para>
  <para>
   YAZ++ is built on top of the 
   <ulink url="&url.yaz;">YAZ</ulink>
   toolkit.
   You need to install that first.
   For some platforms there are binary packages for YAZ.
  </para>
  <section id="unix">
   <title>Installation on Unix (from source)</title>
   <para>On UNIX, the software is compiled as follows:
    <screen>
     $ ./configure
     $ make
     $ su
     # make install
    </screen>
   </para>
   <para>
    You can supply options for the <literal>configure</literal> script.
    The most useful ones are:
    <variablelist>
     <varlistentry>
      <term><literal>--prefix </literal>directory</term>
      <listitem><para>
        Specifies installation prefix. By default
        <filename>/usr/local</filename> is used.
       </para></listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>--with-yaz </literal>directory</term>
      <listitem><para>
        Specifies the location of <filename>yaz-config</filename>.
        The <filename>yaz-config</filename> program is generated in
        the source directory of YAZ as well as the binaries
        directory when YAZ is installed (via make install).
        </para>
       <para>
        If you don't supply this option, <literal>configure</literal> will
        look for <filename>yaz-config</filename> in directories of the
        <envar>PATH</envar> environment - which is nearly always
        what you want.
       </para></listitem>
     </varlistentry>
    </variablelist>
    For the whole list of <literal>configure</literal> options, refer
    to the help:
    <literal>./configure --help</literal>.
   </para>
   <para>
    Configure uses GNU's C/C++ compiler if available. To specify another
    compiler, set <literal>CXX</literal>. To use other compiler flags,
    specify <literal>CXXFLAGS</literal>. To use <literal>CC</literal> 
    with debugging you could use:
    <screen>
     CXXFLAGS="-g" CXX=CC ./configure
    </screen>
   </para>
   <para>
    This is what you have after successful compilation:
    <variablelist>
     <varlistentry>
      <term><filename>src/libyazpp.la</filename></term> 
      <listitem><para>
        The YAZ++ library.
	This library gets installed in your libraries directory
	(<parameter>prefix</parameter><filename>/lib</filename>).
       </para></listitem>
     </varlistentry>
     
     <varlistentry>
      <term><filename>src/libzoompp.la</filename></term> 
      <listitem><para>
        The <link linkend="zoom">ZOOM-C++</link> library.
	This library gets installed in your libraries directory
	(<parameter>prefix</parameter><filename>/lib</filename>).
       </para></listitem>
     </varlistentry>
     
     <varlistentry>
      <term><filename>include/yazpp/*.h</filename></term> 
      <listitem><para>
        Various C++ header files, which you'll need for YAZ++
	development. All these are installed in your header files area
	(<parameter>prefix</parameter><filename>/include/yazpp</filename>).
       </para></listitem>
     </varlistentry>
     
     <varlistentry>
      <term><filename>yazpp-config</filename></term> 
      <listitem><para>
        A Bourne shell-script utility that returns the values of the
	<envar>CFLAGS</envar> and <envar>LIBS</envar>
	environment variables
        needed in order to compile your applications with the YAZ++
	library.  This script gets installed in your binaries directory
        (<parameter>prefix</parameter><filename>/bin</filename>).
       </para></listitem>
     </varlistentry>

     <varlistentry>
      <term><filename>zoom/zclient</filename></term> 
      <listitem><para>
        ZOOM C++ demonstration client that uses the ZOOM C++ classes.
	This client does not get installed in the system directories.
       </para></listitem>
     </varlistentry>

     <varlistentry>
      <term><filename>src/yaz-my-client</filename></term> 
      <listitem><para>
        YAZ C++ demonstration client. This client does not
        get installed in the system directories.
       </para></listitem>
     </varlistentry>

     <varlistentry>
      <term><filename>src/yaz-my-server</filename></term> 
      <listitem><para>
        YAZ C++ demonstration server. This server does not
        get installed in the system directories.
       </para></listitem>
     </varlistentry>
    </variablelist>
   </para>
  </section>
  <section id="windows">
   <title>Installation on Windows</title>
   <para>
    YAZ++ is shipped with "makefiles" for the NMAKE tool that comes
    with <ulink url="&url.vstudio;">Microsoft Visual Studio</ulink>.
    Version 2003 (7) and 2005 (8) has been tested.
    We expect that YAZ++ compiles with versions 5 and 6 as well.
   </para>
   <para>
    Start a command prompt and switch the sub directory
    <filename>WIN</filename> where the file <filename>makefile</filename>
    is located. Customize the installation by editing the
    <filename>makefile</filename> file (for example by using notepad).
    
    The following summarizes the most important settings in that file:
    
    <variablelist>
     <varlistentry><term><literal>DEBUG</literal></term>
      <listitem><para>
	If set to 1, the software is
	compiled with debugging libraries (code generation is
	multi-threaded debug DLL).
	If set to 0, the software is compiled with release libraries
	(code generation is multi-threaded DLL).
       </para></listitem>
     </varlistentry>
     <varlistentry><term><filename>YAZ_DIR</filename></term>
      <listitem><para>
	Specifies the directory of the YAZ source.
       </para></listitem>
     </varlistentry>
    </variablelist>
   </para>
   <para>
    When satisfied with the settings in the makefile, type
    <screen>
     nmake
    </screen>
   </para>
   <tip>
    <para>
     If the <filename>nmake</filename> command is not found on your system
     you probably haven't defined the environment variables required to
     use that tool. To fix that, find and run the batch file
     <filename>vcvars32.bat</filename>. You need to run it from within
     the command prompt or set the environment variables "globally";
     otherwise it doesn't work.
    </para>
   </tip>
   <para>
    If you wish to recompile YAZ++ - for example if you modify
    settings in the <filename>makefile</filename> you can delete
    object files, etc by running.
    <screen>
     nmake clean
    </screen>
   </para>
   <para>
    The following files are generated upon successful compilation:
    
    <variablelist>
     <varlistentry><term><filename>bin/yazpp5.dll</filename></term>
      <listitem><para>
	YAZ++ DLL . Includes ZOOM C++ as well.
	For the debug version <filename>lib/yazpp5d.dll</filename>
	is created instead.
       </para></listitem></varlistentry>
     
     <varlistentry><term><filename>lib/yazpp5.lib</filename></term>
      <listitem><para>
	Import library for <filename>yazpp5.dll</filename>.
	For the debug version <filename>lib/yazpp5d.lib</filename>
	is created instead.
       </para></listitem></varlistentry>
     
     <varlistentry><term><filename>bin/yaz-my-client.exe</filename></term>
      <listitem><para>
	Z39.50 client demonstrating the YAZ++ API.
       </para></listitem></varlistentry>

     <varlistentry><term><filename>bin/yaz-my-server.exe</filename></term>
      <listitem><para>
	Z39.50 server demonstrating the YAZ++ API.
       </para></listitem></varlistentry>

     <varlistentry><term><filename>bin/zclient.exe</filename></term>
      <listitem><para>
	ZOOM C++ demo client. A simple WIN32 console application.
       </para></listitem></varlistentry>
     
    </variablelist>
    
   </para>
   
  </section>
 </chapter>
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document: "yazpp.xml"
 sgml-local-catalogs: nil
 sgml-namecase-general:t
 End:
 -->
